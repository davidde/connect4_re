:root {
  --sidebarFillColor: #250d0d;
  --sidebarFontColor: #7d4444;
  --sidebarHoverColor: #f1f1f1;

  --bodyFillColor: #faf1d7;
  --statusFillColor: rgb(0, 34, 46); /* rgb(48, 42, 42);//#ffd381; */
  --statusBorderColor: #830602;

  --sidebarLandscapeWidth: 40vw;
  --sidebarPortraitWidth: 80vw;

  --transitionDuration: 0.4s;

  --mediaQueryWidth: 1200px;
}

:export {
  mediaQueryWidth: 1200;
}

* {
  margin: 0;
  padding: 0;
}

html, body {
  min-height: 100vh;
  max-width: 100vw;
  background-color: var(--bodyFillColor);
  /* Ensure no scroll bars ever appear: */
  overflow: hidden;
}

#app {
  display: grid;
  grid-template-columns: min-content 1fr;
  /* In CSS Grid, the set of columns and rows are called tracks;
  For the 2 columns we want a dynamic approach: we want both the 'settings'
  and 'grid' section to grow (and shrink), but we want the 'grid' section
  to be at most 1.5 times wider than the 'settings' section, and at least
  90% of the length of the smallest viewport side (i.e. height when in
  landscape, width when in portrait). This is exactly what the minmax()
  function does; it provides a range through which the column width
  can float freely, taking into account the given constraints.
  NOTE:
  In this case, our constraints aren't set in stone:
  at certain sizes our minimum could become larger than our maximum;
  in this case the maximum will simply be ignored until the minimum
  is actually the smallest again!
  fr, the grid-specific fraction unit, allows us to elegantly express
  proportions in relation to each other. */
  grid-template-rows: minmax(min-content, max-content) 1fr;
  /* 'grid-template-rows' takes a sequence of sizes that define the individual rows.
  In this case, we give the first row a minimum height of 10% of the viewport height,
  but allow it to grow bigger if it is required to make the content fit.
  The second row gets a height of 90% of the viewport height. */
  grid-template-areas: 'settings status'
                       'settings game';
  /* 'grid-template-areas' takes a string of space-separated names, allowing us to give
  each cell a name. If two adjacent cells have the same name, they are going to be
  coalesced into the same area. To finish up, we need to register our chosen names
  as 'grid-area's in their respective html elements (see below). */
  /* Set div to full screen or larger: */
  min-height: 100vh;
}

